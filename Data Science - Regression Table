{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "092e73b1-e151-4c38-ba48-a9760b2f023d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import io\n",
    "\n",
    "# The provided data\n",
    "data = \"\"\"\n",
    "Duration,Average_Pulse,Max_Pulse,Calorie_Burnage,Hours_Work,Hours_Sleep\n",
    "60,110,130,409,0,8\n",
    "60,117,145,479,0,8\n",
    "60,103,135,340,8,7.5\n",
    "45,109,175,282,8,8\n",
    "45,117,148,406,0,6.5\n",
    "60,102,127,300,0,7.5\n",
    "60,110,136,374,0,7.5\n",
    "45,104,134,253,0,9\n",
    "30,109,133,195,8,8\n",
    "60,98,124,269,7.5,8\n",
    "60,103,147,329,8,7\n",
    "60,100,120,250,0,5\n",
    "60,106,128,345,8.5,7.5\n",
    "60,104,132,379,8.5,7.5\n",
    "60,98,123,275,9,7\n",
    "60,98,120,215,6.5,7\n",
    "60,100,120,300,9,8\n",
    "45,90,112,180,8,8\n",
    "60,103,123,323,8,8\n",
    "45,97,125,243,8,7\n",
    "60,108,131,364,8,7\n",
    "45,100,119,282,0,7\n",
    "60,130,101,300,8,7\n",
    "45,105,132,246,0,8\n",
    "60,102,126,334,8,8\n",
    "60,100,120,250,8,7\n",
    "60,92,118,241,7,6\n",
    "60,103,132,353,9,8.5\n",
    "60,100,132,280,3,8\n",
    "60,102,129,380,3,8\n",
    "60,92,115,243,7.5,8\n",
    "60,101,124,299,8.5,7.5\n",
    "60,93,113,223,8,7\n",
    "60,107,136,361,2,8\n",
    "60,114,140,415,9,8.5\n",
    "60,100,120,300,8,7\n",
    "60,100,120,300,7,6\n",
    "45,104,129,266,8,7\n",
    "60,98,126,286,7.5,7\n",
    "60,100,122,329,8,7\n",
    "60,111,138,400,8,8\n",
    "60,111,131,397,0,8\n",
    "60,99,119,273,8,7\n",
    "60,109,153,387,8,7\n",
    "45,111,136,300,11,7\n",
    "45,108,129,298,5,7\n",
    "60,111,139,397,0,8\n",
    "60,107,136,380,8.5,8\n",
    "80,123,146,643,8.5,8\n",
    "60,106,130,263,8,8\n",
    "60,118,151,486,7,7\n",
    "30,136,175,238,0,7.5\n",
    "60,121,146,450,5,8\n",
    "60,118,121,413,8,7\n",
    "45,115,144,305,5,7\n",
    "20,153,172,226,0,8\n",
    "45,123,152,321,5,8\n",
    "210,108,160,1376,8,8\n",
    "160,110,137,1034,8,8\n",
    "160,109,135,853,8,8\n",
    "45,118,141,341,8,8\n",
    "20,110,130,131,0,8\n",
    "180,90,130,800,0,8\n",
    "150,105,135,873,8,8\n",
    "150,107,130,816,3,8\n",
    "20,106,136,110,3,8\n",
    "300,108,143,1500,0,8\n",
    "150,97,129,1115,0,8\n",
    "90,100,127,700,0,8\n",
    "150,97,127,953,0,8\n",
    "45,114,146,304,0,8\n",
    "90,98,125,563,0,8\n",
    "45,105,134,251,0,8\n",
    "45,110,141,300,7,7.5\n",
    "120,100,130,500,7,7.5\n",
    "270,100,131,1729,0,7\n",
    "30,159,182,319,5,7.5\n",
    "45,149,169,344,0,8\n",
    "30,103,139,151,4,8\n",
    "120,100,130,500,0,8\n",
    "45,100,120,225,8.5,8\n",
    "30,151,170,300,0,7\n",
    "45,102,136,234,6.5,8\n",
    "120,100,157,1000,0,8\n",
    "45,129,103,242,5,8\n",
    "20,83,107,50,9.5,8\n",
    "180,101,127,600,0,7.5\n",
    "45,107,137,1200,8,8\n",
    "30,90,107,105,7,8\n",
    "15,80,100,50,9,8\n",
    "20,150,171,127,0,7.5\n",
    "20,151,168,229,0,7\n",
    "30,95,128,128,8,7.5\n",
    "25,152,168,244,0,8\n",
    "30,109,131,188,8,7.5\n",
    "90,93,124,604,8,8\n",
    "20,95,112,77,8,8\n",
    "90,90,110,500,8,8\n",
    "90,90,100,500,0,8\n",
    "90,90,100,500,5,8\n",
    "30,92,108,92,8,8\n",
    "30,93,128,124,8,8\n",
    "180,90,120,800,8,8\n",
    "30,90,120,86,7,8\n",
    "90,90,120,500,8,8\n",
    "210,137,184,1860,0,7.5\n",
    "60,102,124,325,0,8\n",
    "45,107,124,275,0,8\n",
    "15,124,139,124,5,6\n",
    "60,108,131,367,0,8\n",
    "60,108,151,351,0,8\n",
    "60,116,141,443,0,8\n",
    "60,97,122,277,0,8\n",
    "60,105,125,353,0,8\n",
    "60,103,124,332,0,8\n",
    "30,112,137,193,0,8\n",
    "45,100,120,100,0,7.5\n",
    "60,119,169,336,0,8\n",
    "60,107,127,344,0,8\n",
    "60,111,151,368,0,8\n",
    "60,98,122,271,0,8\n",
    "60,97,124,275,0,8\n",
    "60,109,127,382,0,6\n",
    "90,99,125,466,0,7.5\n",
    "60,114,151,384,0,12\n",
    "60,104,134,342,0,7.5\n",
    "60,107,138,357,0,7.5\n",
    "60,103,133,335,0,7.5\n",
    "60,106,132,327,0,7.5\n",
    "60,103,136,339,0,7.5\n",
    "20,136,156,189,8.5,7.5\n",
    "45,117,143,317,0,8\n",
    "45,115,137,318,0,7.5\n",
    "45,113,138,308,0,7\n",
    "20,141,162,222,0,7.5\n",
    "60,108,135,390,0,8\n",
    "60,97,127,288,0,8\n",
    "45,100,120,250,0,8\n",
    "45,122,149,335,0,7.5\n",
    "60,136,170,470,8,8\n",
    "45,106,126,270,8,8\n",
    "60,107,136,400,9.5,7\n",
    "60,112,146,361,9,7.5\n",
    "30,103,127,185,9,7.5\n",
    "60,110,150,409,8,7\n",
    "60,106,134,343,8,8.5\n",
    "60,109,129,353,8,8\n",
    "60,109,138,374,8,6\n",
    "30,150,167,275,0,9\n",
    "60,105,128,328,9,8\n",
    "60,97,131,270,9,8\n",
    "60,100,120,270,8,8\n",
    "60,114,150,382,0,8\n",
    "30,80,120,240,10,7\n",
    "30,85,120,250,10,7\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "58586b09-f5bd-4cd6-8c47-099f1403b75f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(io.StringIO(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "529ef126-8f96-46e6-9e56-c559918cc0f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame:\n",
      "     Duration  Average_Pulse  Max_Pulse  Calorie_Burnage  Hours_Work  \\\n",
      "0          60            110        130              409         0.0   \n",
      "1          60            117        145              479         0.0   \n",
      "2          60            103        135              340         8.0   \n",
      "3          45            109        175              282         8.0   \n",
      "4          45            117        148              406         0.0   \n",
      "..        ...            ...        ...              ...         ...   \n",
      "150        60             97        131              270         9.0   \n",
      "151        60            100        120              270         8.0   \n",
      "152        60            114        150              382         0.0   \n",
      "153        30             80        120              240        10.0   \n",
      "154        30             85        120              250        10.0   \n",
      "\n",
      "     Hours_Sleep  \n",
      "0            8.0  \n",
      "1            8.0  \n",
      "2            7.5  \n",
      "3            8.0  \n",
      "4            6.5  \n",
      "..           ...  \n",
      "150          8.0  \n",
      "151          8.0  \n",
      "152          8.0  \n",
      "153          7.0  \n",
      "154          7.0  \n",
      "\n",
      "[155 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(\"Original DataFrame:\")\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "733b8d8c-5545-40e7-8cb3-dfbbabbdcb03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Duration  Average_Pulse  Max_Pulse  Calorie_Burnage  Hours_Work  \\\n",
      "0          60            110        130              409         0.0   \n",
      "1          60            117        145              479         0.0   \n",
      "2          60            103        135              340         8.0   \n",
      "3          45            109        175              282         8.0   \n",
      "4          45            117        148              406         0.0   \n",
      "..        ...            ...        ...              ...         ...   \n",
      "150        60             97        131              270         9.0   \n",
      "151        60            100        120              270         8.0   \n",
      "152        60            114        150              382         0.0   \n",
      "153        30             80        120              240        10.0   \n",
      "154        30             85        120              250        10.0   \n",
      "\n",
      "     Hours_Sleep  \n",
      "0            8.0  \n",
      "1            8.0  \n",
      "2            7.5  \n",
      "3            8.0  \n",
      "4            6.5  \n",
      "..           ...  \n",
      "150          8.0  \n",
      "151          8.0  \n",
      "152          8.0  \n",
      "153          7.0  \n",
      "154          7.0  \n",
      "\n",
      "[155 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "full_health_data = df\n",
    "print(full_health_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5545803c-b383-412b-8cda-b4b3b62eed35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(190.83575266140517), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(474.29152073493316), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(190.83575266140517), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(134.14459904669957), np.float64(275.8724830834636), np.float64(1211.2765177261058), np.float64(927.8207496525779), np.float64(927.8207496525779), np.float64(275.8724830834636), np.float64(134.14459904669957), np.float64(1041.2030568819891), np.float64(871.1295960378723), np.float64(871.1295960378723), np.float64(134.14459904669957), np.float64(1721.4969002584562), np.float64(871.1295960378723), np.float64(530.9826743496387), np.float64(871.1295960378723), np.float64(275.8724830834636), np.float64(530.9826743496387), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(701.0561351937556), np.float64(1551.4234394143396), np.float64(190.83575266140517), np.float64(275.8724830834636), np.float64(190.83575266140517), np.float64(701.0561351937556), np.float64(275.8724830834636), np.float64(190.83575266140517), np.float64(275.8724830834636), np.float64(701.0561351937556), np.float64(275.8724830834636), np.float64(134.14459904669957), np.float64(1041.2030568819891), np.float64(275.8724830834636), np.float64(190.83575266140517), np.float64(105.79902223934677), np.float64(134.14459904669957), np.float64(134.14459904669957), np.float64(190.83575266140517), np.float64(162.49017585405238), np.float64(190.83575266140517), np.float64(530.9826743496387), np.float64(134.14459904669957), np.float64(530.9826743496387), np.float64(530.9826743496387), np.float64(530.9826743496387), np.float64(190.83575266140517), np.float64(190.83575266140517), np.float64(1041.2030568819891), np.float64(190.83575266140517), np.float64(530.9826743496387), np.float64(1211.2765177261058), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(105.79902223934677), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(190.83575266140517), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(530.9826743496387), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(134.14459904669957), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(134.14459904669957), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(275.8724830834636), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(190.83575266140517), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(190.83575266140517), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(360.90921350552196), np.float64(190.83575266140517), np.float64(190.83575266140517)]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "x = full_health_data[\"Duration\"]\n",
    "y = full_health_data [\"Calorie_Burnage\"]\n",
    "\n",
    "slope, intercept, r, p, std_err = stats.linregress(x, y)\n",
    "\n",
    "def myfunc(x):\n",
    " return slope * x + intercept\n",
    "\n",
    "mymodel = list(map(myfunc, x))\n",
    "\n",
    "print(mymodel)\n",
    "\n",
    "plt.scatter(x, y)\n",
    "plt.plot(x, mymodel)\n",
    "plt.ylim(ymin=0, ymax=2000)\n",
    "plt.xlim(xmin=0, xmax=200)\n",
    "plt.xlabel(\"Duration\")\n",
    "plt.ylabel (\"Calorie_Burnage\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6e7bab5-df0a-453d-9cb6-8777eff48d7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:        Calorie_Burnage   R-squared:                       0.822\n",
      "Model:                            OLS   Adj. R-squared:                  0.819\n",
      "Method:                 Least Squares   F-statistic:                     350.2\n",
      "Date:                Sun, 14 Jul 2024   Prob (F-statistic):           1.23e-57\n",
      "Time:                        11:40:40   Log-Likelihood:                -959.46\n",
      "No. Observations:                 155   AIC:                             1925.\n",
      "Df Residuals:                     152   BIC:                             1934.\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================\n",
      "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "Intercept      -358.1775     75.713     -4.731      0.000    -507.763    -208.592\n",
      "Average_Pulse     3.3953      0.661      5.137      0.000       2.089       4.701\n",
      "Duration          5.8727      0.222     26.462      0.000       5.434       6.311\n",
      "==============================================================================\n",
      "Omnibus:                      154.684   Durbin-Watson:                   2.412\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             4890.132\n",
      "Skew:                           3.408   Prob(JB):                         0.00\n",
      "Kurtosis:                      29.660   Cond. No.                     1.01e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.01e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "model = smf.ols('Calorie_Burnage ~ Average_Pulse + Duration', data = full_health_data)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cd37fdd-8aad-4f89-8976-e1915c357b14",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
